package edu.almabridge.restcontroller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import edu.almabridge.dao.BlogDAO;
import edu.almabridge.dao.Blog_CommentDAO;
import edu.almabridge.dao.EventDAO;
import edu.almabridge.model.Blog;
import edu.almabridge.model.Blog_Comment;
import edu.almabridge.model.Event;

@RestController
public class Blog_CommentController {
	
	@Autowired
	private Blog blog;
	
	@Autowired
	private Blog_Comment blog_Comment;
	
	@Autowired
	private BlogDAO blogDAO;
	
	@Autowired
	private Blog_CommentDAO blog_CommentDAO;
	
	
/*	@RequestMapping(value = "/comments", method = RequestMethod.GET)
	public ResponseEntity<List<Blog_Comment>> getBlogComments(){
		List <Blog_Comment> blog_Comments = blog_CommentDAO.getComment(userId)
		if(eventList.isEmpty()){
			Event event = new Event();
			event.setErrorCode("404");
			event.setErrorMsg("No Events posted!");
			eventList.add(event);
		}
		return new ResponseEntity<List<Event>>(eventList, HttpStatus.OK);
	}*/
	//Tested
	@RequestMapping("/blog_Comments/{blogId}")
	public ResponseEntity<List<Blog_Comment>> getComments(@PathVariable("blogId") int blogId){
		List <Blog_Comment> blog_Comments = blog_CommentDAO.getComments(blogId);
				if(blog_Comments.isEmpty()){
					Blog_Comment comment = new Blog_Comment();
					comment.setErrorCode("404");
					comment.setErrorMsg("No Comments posted for this blog!");
					blog_Comments.add(comment);
				}
				return new ResponseEntity<List<Blog_Comment>>(blog_Comments, HttpStatus.OK);
	}
	
	//Tested
	@RequestMapping("/createComment")
	public ResponseEntity<Blog_Comment> createComment(@RequestBody Blog_Comment newComment){
		blog_CommentDAO.saveComment(newComment);
		return new ResponseEntity<Blog_Comment>(newComment , HttpStatus.OK);
	}
	//Tested
	@RequestMapping("/deleteComment/{id}")
	public boolean deleteEvent(@PathVariable("id") int id){
		if(eventDAO.getEvent(id) == null){
			Event event = new Event();
			event.setErrorCode("404");
			event.setErrorMsg("No Events posted!");
		}
		eventDAO.deleteEvent(id);
		return true ;
	}
	//Tested
	@RequestMapping(value="/updateEvent/{id}", method = RequestMethod.POST)
	public ResponseEntity<Event> updateEvent(@PathVariable("id") int id, @RequestBody Event event){
		if(eventDAO.getEvent(id) == null){
			
			event.setErrorCode("404");
			event.setErrorMsg("No Events posted!");
		}
		eventDAO.updateEvent(event);
		return new ResponseEntity<Event>(event, HttpStatus.OK);
	}

}
